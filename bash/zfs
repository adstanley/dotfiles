declare -A FUNCTION_HELP

#@Name: zfs_alias
#@Description: Create functions to change directory to ZFS mountpoints
#@Arguments: None
#@Usage: zfs_alias
#@define help information
FUNCTION_HELP[zfs_alias]=$(
    cat <<'EOF'
NAME
    zfs_alias - Create functions to change directory to ZFS mountpoints

DESCRIPTION
    Create functions to change directory to ZFS mountpoints.

USAGE
    zfs_alias [OPTIONS]

OPTIONS
    -h, --help
        Show this help message and exit.

EXAMPLES
    zfs_alias
        Create functions to change directory to ZFS mountpoints.
    zfs_alias --help
        Show this help message and exit.

EOF
)
#@begin_function
zfs_alias() {
    # Check if the first argument is --help or -h
    # If so, print the help message and exit
    if [[ "$1" == "--help" || "$1" == "-h" ]]; then
        if [[ -n "${FUNCTION_HELP[${FUNCNAME[0]}]}" ]]; then
            echo "${FUNCTION_HELP[${FUNCNAME[0]}]}"
        else
            echo "Help not available for function: ${FUNCNAME[0]}" >&2
            return 2
        fi
        return 0
    fi

    # Create a temporary file using shell builtins
    local tmp_file="/tmp/zfs_alias_$$.tmp" # $$ is the process ID

    # Get list of pools
    mapfile -t pools < <(zpool list -H -o name)

    # Write function definitions to the temporary file
    for pool in "${pools[@]}"; do
        mountpoint=$(zfs get -H mountpoint "$pool" | awk '{print $3}')
        if [[ "$mountpoint" != "none" ]]; then
            echo "cd.$pool() { cd \"$mountpoint\" || exit; }" >>"$tmp_file"
        fi
    done

    # Source the file to define the functions
    source "$tmp_file"

    # Clean up
    rm "$tmp_file"
}
#@end_function

Only call the function if zfs-utils are installed
if command -v zpool > /dev/null 2>&1 && zpool list > /dev/null 2>&1; then
  zfs_alias "$@"
fi

#@ Name: takesnapshot
#@ Description: Create a ZFS snapshot for a specified dataset
#@ Arguments: <dataset> [snapshot_suffix]
#@ Usage: takesnapshot <dataset> [snapshot_suffix] [--dry-run]
#@ define help information
FUNCTION_HELP[takesnapshot]=$(cat << 'EOF'
NAME
    takesnapshot - Create a ZFS snapshot for a specified dataset
DESCRIPTION
    Create a ZFS snapshot for the specified dataset. If no snapshot suffix is provided, a default suffix of "manual-YYYY-MM-DD_HH-MM-SS" is used.
USAGE
    takesnapshot <dataset> [snapshot_suffix] [--dry-run]
OPTIONS
    <dataset>        : ZFS dataset name (e.g., poolname/dataset)
    [snapshot_suffix]: Optional custom suffix for snapshot name (default: manual-YYYY-MM-DD_HH-MM-SS)
    --dry-run        : Show the snapshot command without executing it
    --help           : Display this help message
EXAMPLES
    takesnapshot poolname/dataset
        Create a snapshot with the default suffix.
    takesnapshot poolname/dataset custom_suffix
        Create a snapshot with a custom suffix.
    takesnapshot --dry-run poolname/dataset
        Show the snapshot command without executing it.
EOF
)
#@begin_function takesnapshot
function takesnapshot_old() {
    if [[ "$1" == "--help" || "$1" == "-h" ]]; then
        if [[ -n "${FUNCTION_HELP[${FUNCNAME[0]}]}" ]]; then
            echo "${FUNCTION_HELP[${FUNCNAME[0]}]}"
        else
            echo "Help not available for function: ${FUNCNAME[0]}" >&2
            return 2
        fi
        return 0
    fi

    # Check if the input is empty
    if [ -z "$1" ]; then
        printf "Input is empty\n" >&2
        return 1 # Exit with error
    fi

    # Check if the zfs command is available
    if ! command -v zfs &>/dev/null; then
        printf "Error: zfs command not found or not installed\n" >&2
        return 1 # Exit with error
    fi

    # Create a snapshot for the given dataset
    if output=$(zfs snapshot "$1@manual-$(date +"%Y-%m-%d_%H-%M-%S")" 2>&1); then
        printf "%s\n" "$output"
    else
        printf "Error: %s\n" "$output" >&2
        return 3 # Exit with error
    fi
}
#@end_function

#@ Name: takesnapshot
#@ Description: Create a ZFS snapshot for a specified dataset
#@ Arguments: <dataset> [snapshot_suffix]
#@ Usage: takesnapshot <dataset> [snapshot_suffix] [--dry-run]
#@ define help information
FUNCTION_HELP[takesnapshot]=$(cat << 'EOF'
NAME
    takesnapshot - Create a ZFS snapshot for a specified dataset
DESCRIPTION
    Create a ZFS snapshot for the specified dataset. If no snapshot suffix is provided, a default suffix of "manual-YYYY-MM-DD_HH-MM-SS" is used.
USAGE
    takesnapshot <dataset> [snapshot_suffix] [--dry-run]
OPTIONS
    <dataset>        : ZFS dataset name (e.g., poolname/dataset)
    [snapshot_suffix]: Optional custom suffix for snapshot name (default: manual-YYYY-MM-DD_HH-MM-SS)
    --dry-run        : Show the snapshot command without executing it
    --help           : Display this help message
EXAMPLES
    takesnapshot poolname/dataset
        Create a snapshot with the default suffix.
    takesnapshot poolname/dataset custom_suffix
        Create a snapshot with a custom suffix.
    takesnapshot --dry-run poolname/dataset
        Show the snapshot command without executing it.
EOF
)
#@begin_function takesnapshot
function takesnapshot() {
    # Display help message if --help is provided
    if [[ "$1" == "--help" || "$1" == "-h" ]]; then
        if [[ -n "${FUNCTION_HELP[${FUNCNAME[0]}]}" ]]; then
            echo "${FUNCTION_HELP[${FUNCNAME[0]}]}"
        else
            echo "Help not available for function: ${FUNCNAME[0]}" >&2
            return 2
        fi
        return 0
    fi

    # Check if zfs command is available
    if ! command -v zfs &> /dev/null; then
        printf "Error: zfs command not found or not installed\n" 1>&2
        return 1
    fi

    # Check if dataset is provided
    if [ -z "$1" ]; then
        printf "Error: No dataset specified\n" 1>&2
        return 2
    fi

    local dataset="$1"
    local snapshot_suffix="${2:-manual-$(date +"%Y-%m-%d_%H-%M-%S")}"
    local dry_run=false

    # Check for dry-run flag
    if [ "$dataset" = "--dry-run" ]; then
        if [ -z "$2" ]; then
            printf "Error: --dry-run requires a dataset\n" 1>&2
            return 2
        fi
        dry_run=true
        dataset="$2"
        snapshot_suffix="${3:-manual-$(date +"%Y-%m-%d_%H-%M-%S")}"
    fi

    # Validate dataset existence
    if ! zfs list "$dataset" &> /dev/null; then
        printf "Error: Dataset '%s' does not exist\n" "$dataset" 1>&2
        return 3
    fi

    # Validate snapshot suffix (if provided)
    if [ -n "$2" ] && [ "$2" != "--dry-run" ] && [[ ! "$snapshot_suffix" =~ ^[a-zA-Z0-9_-]+$ ]]; then
        printf "Error: Invalid snapshot suffix '%s'. Use alphanumeric characters, '_', or '-'\n" "$snapshot_suffix" 1>&2
        return 4
    fi

    local snapshot_name="$dataset@$snapshot_suffix"

    # Perform dry run if requested
    if [ "$dry_run" = true ]; then
        printf "Dry run: Would execute: zfs snapshot %s\n" "$snapshot_name"
        return 0
    fi

    # Create the snapshot
    if output=$(zfs snapshot "$snapshot_name" 2>&1); then
        printf "Snapshot created: %s\n" "$snapshot_name"
        return 0
    else
        printf "Error creating snapshot: %s\n" "$output" 1>&2
        return 6
    fi
}
#@end_function takesnapshot

#@Name: getsnapshot
#@Description: Get a list of snapshots for a given dataset
#@Arguments: <dataset>
#@Usage: getsnapshot <dataset>
#@define help information
FUNCTION_HELP[getsnapshot]=$(cat << 'EOF'
NAME
    function_name - Short description of the function

DESCRIPTION
    A longer description of the function, explaining what it does and how to use it.

USAGE
    function_name [OPTIONS]

OPTIONS
    -h, --help
        Show this help message and exit.

EXAMPLES

EOF
)
#@begin_function getsnapshot
function getsnapshot() {
    if [[ "$1" == "--help" || "$1" == "-h" ]]; then
        if [[ -n "${FUNCTION_HELP[${FUNCNAME[0]}]}" ]]; then
            echo "${FUNCTION_HELP[${FUNCNAME[0]}]}"
        else
            echo "Help not available for function: ${FUNCNAME[0]}" >&2
            return 2
        fi
        return 0
    fi

    # Check if the input is empty
    if [ -z "$1" ]; then
        printf "Input is empty\n" >&2
        return 1
    fi

    # Check if the zfs command is available
    if ! command -v zfs &>/dev/null; then
        printf "Error: zfs command not found or not installed\n" >&2
        return 1
    fi

    # Retrieve the list of snapshots for the given dataset
    if output=$(zfs list -H -o name -t snapshot -r "$1" 2>&1); then
        printf "%s\n" "$output"
    else
        printf "Error: %s\n" "$output" >&2
        return 3
    fi
}
#@end_function

# Define the function to show ZFS holds
#@begin_function holds
function holds() {
    if [[ "$1" == "--help" || "$1" == "-h" ]]; then
        if [[ -n "${FUNCTION_HELP[${FUNCNAME[0]}]}" ]]; then
            echo "${FUNCTION_HELP[${FUNCNAME[0]}]}"
        else
            echo "Help not available for function: ${FUNCNAME[0]}" >&2
            return 2
        fi
        return 0
    fi

    zfs get -Ht snapshot userrefs | grep -v $'\t'0 | cut -d $'\t' -f 1 | tr '\n' '\0' | xargs -0 zfs holds
}
#@end_function


# Function to create multiple ZFS datasets at once
#@begin_function create_datasets
function create_datasets() {
    if [[ "$1" == "--help" || "$1" == "-h" ]]; then
        if [[ -n "${FUNCTION_HELP[${FUNCNAME[0]}]}" ]]; then
            echo "${FUNCTION_HELP[${FUNCNAME[0]}]}"
        else
            echo "Help not available for function: ${FUNCNAME[0]}" >&2
            return 2
        fi
        return 0
    fi

  local pool_name="$1"
  shift  # Remove the first argument (pool name)
  
  # Check if pool name was provided
  if [ -z "$pool_name" ]; then
    printf "Error: Pool name is required\n"
    printf "Usage: create_datasets <pool_name> <dataset1> <dataset2> ...\n"
    return 1
  fi
  
  # Check if at least one dataset name was provided
  if [ $# -eq 0 ]; then
    printf "Error: At least one dataset name is required\n"
    printf "Usage: create_datasets <pool_name> <dataset1> <dataset2> ...\n"
    return 1
  fi
  
  # Create each dataset
  for ds in "$@"; do
    printf "Creating dataset: %s\n" "$pool_name/$ds"
    zfs create "$pool_name/$ds" && printf "Success\n" || printf "Failed with exit code %s\n" "$?"
  done
}
#@end_function


#@begin_function deletesnapshot
function deletesnapshot() {
    if [[ "$1" == "--help" || "$1" == "-h" ]]; then
        if [[ -n "${FUNCTION_HELP[${FUNCNAME[0]}]}" ]]; then
            echo "${FUNCTION_HELP[${FUNCNAME[0]}]}"
        else
            echo "Help not available for function: ${FUNCNAME[0]}" >&2
            return 2
        fi
        return 0
    fi

    # Check if the input is empty
    if [ -z "$1" ]; then
        printf "Input is empty\n" >&2
        return 1
    fi

    # List all snapshots for the given dataset
    zfs list -H -o name -t snapshot -r "$1"

    # Prompt the user to confirm the deletion
    read -pr "Delete all snapshots? (y/n) " answer

    # Check if the user confirms
    if [[ $answer =~ ^[Yy] ]]; then
        # Delete all snapshots for the dataset
        zfs list -H -o name -t snapshot -r "$1" | xargs -n1 zfs destroy
    else
        # Print "Aborting..." and exit the function
        printf "Aborting...\n"
    fi
}
#@end_function